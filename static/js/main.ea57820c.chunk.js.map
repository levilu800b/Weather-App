{"version":3,"sources":["FinalData.js","Info.js","DateCard.js","ApiClient.js","App.js","reportWebVitals.js","index.js"],"names":["SummaryData","Table","striped","bordered","hover","size","colSpan","this","props","max","min","wind","React","Component","Info","Card","className","Body","Text","text","DateCard","day","Date","parseInt","dateString","nameDay","getDay","month","getMonth","date","getDate","image","img","maxTemp","Math","round","minTemp","windSpeed","dataKey","Header","as","Image","src","alt","FinalData","ApiClient","response","status","Promise","resolve","reject","Error","statusText","getRequest","url","axios","get","then","catch","error","console","alert","App","state","loading","weather","apiClient","setState","fetching","getWeather","updateWeather","data","daily","finally","log","slice","map","current","i","Col","lg","CardGroup","dt","icon","description","temp","wind_speed","fetchWeatherData","Row","buildCards","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ea57820c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport Table from 'react-bootstrap/Table';\r\n\r\nclass SummaryData extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Table striped bordered hover size=\"sm\">\r\n          <thead>\r\n            <tr>\r\n              <th colSpan=\"2\"><sup>o</sup>C</th>\r\n              <th>W</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td>{this.props.max}</td>\r\n              <td>{this.props.min}</td>\r\n              <td>{this.props.wind}</td>\r\n            </tr>\r\n          </tbody>\r\n        </Table>\r\n      </>\r\n    );\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default SummaryData;","import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\n\r\nclass Info extends React.Component {\r\n\r\n  render() {    \r\n    return (\r\n      <>\r\n        <Card className=\"mx-auto text-center mt-2 border-0\">\r\n          <Card.Body>\r\n          <Card.Text>{this.props.text}</Card.Text>\r\n          </Card.Body>\r\n        </Card>\r\n      </>\r\n    );\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default Info;","import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Image from 'react-bootstrap/Image';\r\nimport FinalData from './FinalData';\r\nimport Info from './Info'\r\n\r\nclass DateCard extends React.Component {\r\n\r\n\r\n  render() {\r\n    const days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"]\r\n    const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\r\n    const day = new Date(parseInt(this.props.dateString) * 1000);\r\n    const nameDay = days[day.getDay(day)]\r\n    const month = months[day.getMonth(day)]\r\n    const date = day.getDate(day)\r\n    const image = `http://openweathermap.org/img/wn/${this.props.img}@2x.png`\r\n    const maxTemp = Math.round(this.props.max, 1)\r\n    const minTemp = Math.round(this.props.min, 1)\r\n    const windSpeed = Math.round(this.props.wind, 1)\r\n    const dataKey = this.props.dateString + \"data\"\r\n\r\n    return (\r\n      <>\r\n          <Card className=\"mx-auto text-center mt-2\">\r\n            <Card.Header as=\"h5\">{nameDay}{\"-\"}{date}{\"-\"}{month}</Card.Header>\r\n            <Image className=\"mx-auto\" src={image} alt={this.props.alt} />\r\n            <Card.Body>\r\n              <Info text={this.props.text} />\r\n              <FinalData key={dataKey} max={maxTemp} min={minTemp} wind={windSpeed} />\r\n            </Card.Body>\r\n          </Card>\r\n      </>\r\n    );\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default DateCard;","import axios from 'axios'\r\n\r\nexport class ApiClient {\r\n\r\n  status(response) {\r\n    if (response.status >= 200 && response.status < 300) {\r\n      return Promise.resolve(response)\r\n    } else {\r\n      return Promise.reject(new Error(response.statusText))\r\n    }\r\n  }\r\n\r\n  getWeather() {\r\n    return this.getRequest(\"https://api.openweathermap.org/data/2.5/onecall?lat=53.382969&lon=-1.4659&exclude=hourly,minutely&units=metric&appid=06af2c84a95e6a736fd7bab4b3be279d\")\r\n  }\r\n\r\n  getRequest(url) {\r\n    return axios.get(url)\r\n      .then(this.status)\r\n      .catch(function (error) {\r\n        // handle error\r\n        console.error(error);\r\n        alert(error)\r\n      })\r\n  }\r\n\r\n}","import React from 'react';\nimport DateCard from './DateCard';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport CardGroup from 'react-bootstrap/CardGroup';\nimport { ApiClient } from './ApiClient'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      loading: \"\",\n      weather: []\n    }\n    this.apiClient = new ApiClient()\n  }\n\n\n  fetchWeatherData() {\n    this.setState({\n      loading: \"....loading\",\n      fetching: true\n    })\n\n    this.apiClient.getWeather()\n      .then((response) => { this.updateWeather(response.data.daily) })\n      .finally(() => {\n        this.setState({\n          loading: \"\"\n        }, console.log(this.state.weather))\n      })\n  }\n\n  updateWeather(response) {\n    this.setState({\n      weather: response\n    })\n  }\n\n  buildCards() {\n    return this.state.weather.slice(1, 6).map((current, i) => (\n      <Col key={i} lg>\n        <CardGroup>\n          <DateCard dateString={current.dt} img={current.weather[0].icon} alt={current.weather[0].description} text={current.weather[0].description} max={current.temp.max} min={current.temp.min} wind={current.wind_speed} />\n        </CardGroup>\n      </Col>\n\n    )\n    )\n  }\n\n  componentDidMount() {\n    this.fetchWeatherData()\n\n  }\n\n  render() {\n    return (\n      <>\n\n       <div className=\"App\">\n      <div className=\"card\">\n        <h2 className=\"title\"><i className=\"fa fa-cloud\"></i>Weather App</h2>\n        </div>\n      </div>\n          <Row>\n            {this.buildCards()}\n          </Row>\n      </>\n    );\n  }\n\n\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}